plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'com.gradleup.shadow' version '8.3.6'
    id 'com.diffplug.spotless' version '7.0.4'
    id 'com.github.node-gradle.node' version '7.1.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21) // Or your preferred Java version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.17.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.17.1'

    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.wiremock:wiremock-standalone:3.+'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    // For testing, if you use Lombok in your test code
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'
    // jakarta.persistence-api is automatically brought by spring-boot-starter-data-jpa
}

// --- Shadow Jar Plugin Configuration ---
// This configures the 'shadowJar' task
tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    // Configure the main class for the executable JAR
    // Replace 'com.example.membersapp.MembersappApplication' with your actual main class
    dependsOn('copyReactBuild')
    manifest {
        attributes 'Main-Class': 'com.example.membersapp.MembersappApplication'
    }

    // Merge service files (crucial for Spring Boot and other frameworks)
    // Spring Boot relies on merging these files, otherwise, autoconfiguration might fail.
    mergeServiceFiles()

    // Append specific Spring Boot metadata files (important for Spring Boot 2.7+ and 3.x)
    // These ensure Spring's internal mechanisms work correctly in a shadowed JAR.
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    append 'META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports' // For Spring Boot 2.7+ and 3.x

    // Handle properties files, especially 'spring.factories' (important for Spring Boot)
    // The 'PropertiesFileTransformer' merges multiple 'spring.factories' files into one.
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories']
        mergeStrategy = "append"
    }
    // Optional: Exclude specific files if they cause issues or are not needed
    // exclude 'META-INF/*.SF'
    // exclude 'META-INF/*.DSA'
    // exclude 'META-INF/*.RSA'

    // Optional: Change the classifier if you don't want 'all'
    // archiveClassifier = 'my-custom-shadow'

    // Optional: Include only specific configurations (e.g., runtimeClasspath)
    // By default, it shadows all configurations that extend from 'runtimeClasspath'.
    // If you want to exclude 'developmentOnly' dependencies from your shadowed JAR (common in Spring Boot),
    // you might need a more advanced configuration, for example:
    // configurations = [project.configurations.runtimeClasspath]
    // Or create a custom configuration:
    // configurations = [project.configurations.productionRuntimeClasspath] // Requires defining this config first
}

spotless {
    // Configure Java formatting
    java {
        // Target all .java files under src/main and src/test
        // exclude '**/build/**', '**/target/**' // No need to exclude if you target src/ explicitly

        // Choose a formatter:
        // 1. Google Java Format (recommended for consistency)
        googleJavaFormat()
             endWithNewline()}
}

// Define the path to your frontend project
def frontendDir = "$projectDir/src/frontend"


// Task to build the React frontend
/*tasks.buildReact(type: Exec) {
    dependsOn npmInstall // Ensure npmInstall runs first
    workingDir frontendDir
    inputs.dir frontendDir // If frontend source files change, run this task again
    outputs.dir "$frontendDir/build" // Output directory of the React build
    commandLine 'npm', 'run', 'build' // Or 'yarn', 'build' if you use yarn
}*/

node {
    // Crucially, set download to true to have the plugin manage Node.js/npm
    download = true
    version = '18.17.0' // Specify the Node.js version you want to use
    npmVersion = '9.6.7' // Specify the npm version (often tied to Node.js version)

    // Optional: You can specify a working directory for the downloaded Node.js/npm
    workDir = file("${projectDir}/build/frontend")// This is where node_modules will be
}

tasks.register('buildReact', Exec) {
    // Or 'yarn', 'build'
    dependsOn npmInstall
    workingDir frontendDir
   inputs.dir frontendDir
    // Optional: Declare outputs for incremental builds
    outputs.dir "$frontendDir/build" // Assuming React builds to a 'build
    // ' directory
    commandLine 'C:\\Users\\dsche\\AppData\\Local\\nvm\\v18.17.1\\npm.cmd', 'run', 'build'
}

// Task to copy React build artifacts to Spring Boot's static resources
/*tasks.copyReactBuild(type: Copy) {
    dependsOn buildReact // Ensure React build runs first
    from "$frontendDir/build"
    into "$projectDir/src/main/resources/static" // Target directory for Spring Boot static resources
}*/

// Task to copy React build artifacts to Spring Boot's static resources
tasks.register('copyReactBuild',Copy) {
    dependsOn buildReact // Ensure React build runs first
    from "$frontendDir/build"
    into "$projectDir/build/resources/main/static" // Target directory for Spring Boot static resources
}
// Ensure Spring Boot's bootJar task runs after the React build is copied
tasks.named('bootJar') {
    dependsOn copyReactBuild
}

tasks.named('test') {
    useJUnitPlatform()
}